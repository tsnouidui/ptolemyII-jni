<!-- $Id$ -->
<html>
<head>
<title>ptolemy.actor.lib.opencv</title>
</head>
<body>
Actors that use the Open Computer Vision (OpenCV) API.

<h2>Installing OpenCV</h2>
See <a
href="http://ubaa.net/shared/processing/opencv/"><code>http://ubaa.net/shared/processing/opencv/</code></a>
for details.
<h3>Installing OpenCV under Linux</h3>
<ol>
<li>Find an OpenCV 1.1 RPM by searching the net for <code>opencv rpm</code>.
You must install OpenCV-1.1.  OpenCV-1.0 and OpenCV-2.0 will not have
the proper shared libraries.  If OpenCV-1.1 is <b>not</b> installed, then
the ptII configure will print:
<pre>
checking for the OpenCV jar files...
!!! required library not found : no OpenCV in java.library.path
Verify that the java.library.path property is correctly set and 'libcxcore.so',
'libcv.so', 'libcvaux.so', 'libml.so', and 'libhighgui.so' are placed (or linked)
in one of your system shared libraries folder
</pre>

<li>Do the install:
I could not find a 64 bit linux rpm that did not require lots of other
packages, so I built from source:
<pre>
wget http://downloads.sourceforge.net/project/opencvlibrary/opencv-unix/1.1pre1/opencv-1.1pre1.tar.gz?use_mirror=iweb
tar -zxf opencv-1.1pre1.tar.gz
cd opencv-1.1.0
./configure
make
sudo make install
</pre>
<li>Download
<a href="http://ubaa.net/shared/processing/opencv/download/opencv_01.zip"><code>http://ubaa.net/shared/processing/opencv/download/opencv_01.zip</code></a>
<pre>
sudo -i
cd /tmp
wget http://ubaa.net/shared/processing/opencv/download/opencv_01.zip
cd /usr/java
unzip /tmp/opencv_01.zip
cp /usr/java/OpenCV/library/OpenCV.jar /usr/java/default/jre/lib/ext/
cp /usr/java/OpenCV/library/libOpenCV.so /usr/java/default/jre/bin/
</pre>

Note that <code>libOpenCV.so</code> is a 32 bit shared library, so to
recompile for 64 bit:
<pre>
cd /usr/java/OpenCV/source/cpp
javah -classpath ../java -jni hypermedia.video.OpenCV 
g++ -fPIC -shared OpenCV.cpp -I/usr/local/include/opencv -lc\
v -o libOpenCV.so
cp libOpenCV.so /usr/java/default/jre/lib/amd64/
</pre>
<li> Download <a href="http://processing.googlecode.com/files/processing-1.1.tgz"><code>http://processing.googlecode.com/files/processing-1.1.tgz</code></a>
<pre>
tar -zxf processing-1.1.tgz
cp processing-1.1/lib/core.jar /usr/java/default/jre/lib/ext/
</pre>
</ol>

<h3>Installing OpenCV under Mac OS X</h3>

<p>>Note that Under Mac OS, you <b>must</b> be running a 32-bit version of Java.
In Mac OS 10.6 and later, the default version is a 64-bit version.  To run a 32-bit version,
invoke Java with <code>-d32</code>.  To test, try:
<pre>
bash-3.2$ java -d32 -version
java version "1.6.0_29"
Java(TM) SE Runtime Environment (build 1.6.0_29-b11-402-11D50b)
Java HotSpot(TM) Client VM (build 20.4-b02-402, mixed mode)
bash-3.2$ 
</pre>
A 64-bit version will look like:
<pre>
bash-3.2$ java -version
java version "1.6.0_29"
Java(TM) SE Runtime Environment (build 1.6.0_29-b11-402-11D50b)
Java HotSpot(TM) 64-Bit Server VM (build 20.4-b02-402, mixed mode)
</pre>

<p>If you try to run with a 64-bit version, you will get something about
<pre>
!!!required library not found:  Can't find dependent Libraries
Verify that the java.library.path is correctly set and the path exists
in your system Path
</pre>

<p>To pass the <code>-d32</code> flag to vergil under Mac OS X, do
<pre>
export JAVAFLAGS=-d32
$PTII/bin/vergil -v $PTII/ptolemy/actor/lib/opencv/demo/OpenCVReader/OpenCVReader.xml 
</pre>
The <code>-v</code> causes vergil to display the command line arguments so that you can check to see that <code>-d32</code> was passed.

If the model is run in 64-bit mode, you will see an UnsatisfiedLinkError error message.

<ol>
 <li> Download <a href="http://ubaa.net/shared/processing/opencv/download/01/opencv-framework.1.1.dmg"><code>http://ubaa.net/shared/processing/opencv/download/01/opencv-framework.1.1.dmg</code></a>
 <li> Install <code>opencv-framework.1.1.dmg</code>, which will
 create <code>/Library/Frameworks/OpenCV.framework/</code>
 <li> Download the 1.5.1 version of Processing from
  <a href="http://processing.org/download/index.html"><code>http://processing.org/download/index.html</code></a>
 <li> Unzip <code>processing-1.5.1-macosx.zip</code> and then do
  <pre>
sudo mv ~/Downloads/Processing.app/ /Applications/
  </pre>
 <li> Copy <code>core.jar</code> from Processing to the extensions directory
  <pre>
sudo cp /Applications/Processing.app/Contents/Resources/Java/core.jar /System/Library/Java/Extensions/
  </pre>
  If you don't do the copy, then you will get errors about
  processing.core.PImage missing because OpenCV.jar is in the
  extensions folder and needs PImage, so even if core.jar is on your
  classpath, it will only be found if it is in the extensions folder.
  
 <li> Download and unzip<a href="http://ubaa.net/shared/processing/opencv/download/01/opencv_01.zip"><code>http://ubaa.net/shared/processing/opencv/download/01/opencv_01.zip</code></a>
 <li> Copy the <code>.jar</code> and <code>.jnilib</code> to
 <code>/System/Library/Java/Extensions</code>:
 <pre>
    sudo cp ~/Downloads/OpenCV/library/OpenCV.jar /System/Library/Java/Extensions/
    sudo cp ~/Downloads/OpenCV/library/libOpenCV.jnilib /System/Library/Java/Extensions/
 </pre>
</ol>

<h3>Installing OpenCV under Windows</h3>
Make sure that you install "OpenCV release version 1.0", <b>not</b>
2.0
<pre>
!!!required library not found:C:\Program Files
(x86)\Java\jdk1.6.0_18\jre\bin\OpenCV.dll: Can't find dependent
libraries
Verify that the java.library.path property is correctly set and the
'\path\to\OpenCV\bin' exists in your system path
</pre>

<p>Running dependency Walker on OpenCV.dll showed that it was dependent
on <code>CV100.DLL</code>, <code>CXCORE100.DLL</code> and
<code>HIGHGUI100.DLL</code>.
However, The OpenCV2.0 directory (which is wrong) does not have these dlls.

<p>
@since Ptolemy II 8.1
</body>
</html>
